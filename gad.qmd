# Games as Decisions {#sec-gad}

Much of what happens in this book comes from seeing demonic decision problems as games and, conversely, seeing games as potential demonic decision problems. So I want to spend a little time setting out how the translation between the two works. This is intended largely for people who want to use the existing resources in game theory, which are voluminous, as a source for decision theoretic ideas.

Say that a demonic decision problem is a problem where the states are sensitive to the predictions of some kind of demon. So Newcomb's Problem is the classic demonic decision problem, but it's hardly the only one. Indeed, almost every decision problem in this book is demonic. Transforming a demonic decision problem into a game is easy. As I noted, you just replace the states generated by Demon's choices with moves for Demon, and give them payout 1 if they predict correctly, and 0 otherwise.

You might worry that this only gives you cases where Demon is approximately perfect, but we also want cases where the demon is, say, 80% accurate. But that's easy to do as well. In fact there are two ways to do it.

The first is what I'll call the Selten strategy, because it gives the demon a 'trembling hand' in the sense of @Selten1975. Instead of letting Demon choose a state in the original problem, let Demon choose one of $n$ buttons, where $n$ is the number of choices the (human) chooser has. Each button is connected to a probabilistic device that generates one of the original states. If you want Demon to be 80% accurate when option $o_i$ is chosen, say the button $b_i$ associated with option $o_i$ outputs state $s_i$ with probability 0.8, and each of the other states with probability $\frac{0.2}{n - 1}$. And still say that Demon gets payout 1 for any $i$ if the chooser selects $o_i$ and the button generates state $s_i$, and 0 otherwise.

The second is what I'll call the Smullyan strategy, because it involves a Knights and Knaves puzzle of the kind that play a role in several of Smullyan's books, especially his [-@Smullyan1978]. Here the randomisation takes place before Demon's choice. Demon is assigned a type Knight or Knave. Demon is told of the assignment, but Chooser is not. If Demon is assigned type Knight, the payouts stay the same as in the game where Demon is arbitrarily accurate. If Demon is assigned type Knave, the payouts are reversed, and Demon gets payout 1 for an incorrect prediction.

There are benefits to each approach, and there are slightly different edge cases that are handled better by one or other version. I find the Selten strategy a little easier to use, especially if Demon's expected accuracy is different with different choices by Chooser. But in general either will work for turning a demonic decision problem into a game.

Turning games into demonic decision problems is a bit more interesting. Start with a completely generic two-player, two-option, simultaneous move, symmetric game, as shown in table @tbl-basic-sym-game. We won't only look at symmetric games, but it's a nice way to start.

|       |   A    |   B    |
|:-----:|:------:|:------:|
| **A** | $x, x$ | $y, z$ |
| **B** | $z, y$ | $w, w$ |

: A generic symmetric game. {#tbl-basic-sym-game}

In words, what this says is that each player chooses either A or B. If they both choose A, they both get $x$. If they both choose B, they both get $w$. And if one chooses A and the other chooses B, the one who chooses A gets $y$ and the one who chooses B gets $z$. (Note that the payouts list row's payment first, if you're struggling to translate between the table and the text.) A lot of famous games can be defined in terms of restrictions on the four payout values. For example, a game like this is a Prisoners' Dilemma if the following constraints are met.

-   $x > z$
-   $y > w$
-   $w > x$

Some books will also add $2x > y + z$ as a further constraint, but I'll stick with these three.

Now to turn a game into a demonic decision problem, first replace column's payouts with 1s and 0s, with 1s along the main diagonal, and 0s everywhere else. Table @tbl-demon-sym-game shows what a generic symmetric game looks like after this transformation.

|       |   A    |   B    |
|:-----:|:------:|:------:|
| **A** | $x, 1$ | $y, 0$ |
| **B** | $z, 0$ | $w, 1$ |

: The demonic version of a generic symmetric game. {#tbl-demon-sym-game}

The next step is to replace Demon's moves with states that are generated by Demon's predictions. As before, I'll put 'P' in front of a choice name to indicate the state of that choice being predicted. The result is table @tbl-gen-dem-problem.

|       | PA  | PB  |
|:-----:|:---:|:---:|
| **A** | $x$ | $y$ |
| **B** | $z$ | $w$ |

: The demonic decision problem generated by a generic symmetric game.. {#tbl-gen-dem-problem}

If we add the constraints $x > z, y > w, w > x$, this is essentially a Newcomb Problem. I'm a long way from the first to point out the connections between Prisoners' Dilemma and Newcomb's Problem; it's literally in the title of a David Lewis paper [@Lewis1979e]. But what I want to stress here is the recipe for turning a familiar game into a demonic problem.

We can do the same thing with Chicken. The toy story behind Chicken is that two cars are facing off at the end of a road. They will drive straight at each other, and at the last second, each driver will choose to swerve off the road, which we'll call option A, or stay on the road, which we'll call option B. If one swerves and the other stays, the one who stays is the winner. If they both swerve they both lose and it's boring, and if they both stay it's a fiery crash. So in terms of the payouts in the general symmetric game, the constraints are:

-   $x < z$
-   $y >> w$
-   $x >> w$

## Up to Here

Just what it means for one value to be much more than another, which is what I mean by '$>>$', is obviously vague. Table \@ref(tab:basic-chicken) gives an example with some numbers that should satisfy it.

```{r, basic-chicken, cache=TRUE}
basic_chicken <- tribble(
	   ~"", ~A, ~B,
	   "A", "$0, 0$", "$0, 1$",
	   "B", "$1, 0$", "$-100, -100$"
	)
gameformat(basic_chicken, "A version of Chicken.")
```

Replace the other driver, the one who plays column in this version, with a Demon, who only wants to predict row's move. The result is table \@ref(tab:demon-chicken).

```{r,demon-chicken, cache=TRUE}
demon_chicken <- tribble(
	   ~"", ~A, ~B,
	   "A", "$0, 1$", "$0, 0$",
	   "B", "$1, 0$", "$-100, 1$"
	)
gameformat(demon_chicken, "A demonic version of Chicken.")
```

All I've done to generate table \@ref(tab:demon-chicken) is replace column's payouts with 1s on the main diagonal, and 0s elsewhere. The next step is to replace the demonic player with states generated by Demon's choices. The result is table \@ref(tab:egan-game).

```{r,egan-game, cache=TRUE}
egan_game <- tribble(
	   ~"", ~PA, ~PB,
	   "A", "$0$", "$0$",
	   "B", "$1$", "$-100$"
	)
gameformat(egan_game, "A demonic decision problem based on Chicken.")
```

And table \@ref(tab:egan-game) is just the Psychopath Button example that Andy @Egan2007 raises as a problem for Causal Decision Theory.

Another familiar game from introductory game theory textbooks is matching pennies. This is a somewhat simplified version of rock-paper-scissors. Each player has a penny, and they reveal their penny simultaneously. They can either show it with the heads side up (option A), or the tails side up (option B). We specify in advance who wins if they show the same way, and who wins if they show opposite ways. So let's say column will win if both coins are heads or both are tails, and row will win if they are different. The payouts are shown in table \@ref(tab:match-pennies).

```{r,match-pennies, cache=TRUE}
matching_pennies <- tribble(
	   ~"", ~A, ~B,
	   "A", "$0, 1$", "$1, 0$",
	   "B", "$1, 0$", "$0, 1$"
	)
gameformat(matching_pennies, "The game matching pennies.")
```

This isn't a symmetric game, but it is already demonic. Column's payouts are 1 in the main diagonal and 0 elsewhere. So we can convert it to a demonic decision problem fairly easily, as in table \@ref(tab:death-in-damascus).

```{r,death-in-damascus, cache=TRUE}
d_i_d <- tribble(
	   ~"", ~PA, ~PB,
	   "A", "$0$", "$1$",
	   "B", "$1$", "$0$"
	)
gameformat(d_i_d, "Matching pennies as a decision problem")
```

And table \@ref(tab:death-in-damascus) is the familiar problem Death in Damascus from @GibbardHarper1978.

Let's do one last one, starting with the familiar game Battle of the Sexes. Row and Column each have to choose whether to do R or C. They both prefer doing the same thing to doing different things. But Row would prefer they both do R, and Column would prefer they both do C. (The original name comes from a version of the story where Row and Column are a heterosexual married couple, and Row wants to do some stereotypically male thing, while Column wants to do some stereotypically female thing. That framing is tiresome at best, but the category of asymmetric coordination games is not, hence my more abstract presentation.) So table \@ref(tab:bach-stravinsky) is one way we might think of the payouts.

```{r,bach-stravinsky, cache=TRUE}
b_o_t_s <- tribble(
	   ~"", ~R, ~C,
	   "R", "$4, 1$", "$0, 0$",
	   "C", "$0, 0$", "$1, 4$"
	)
gameformat(b_o_t_s, "A version of battle of the sexes.")
```

As it stands, that's not a symmetric game. But we can make it a symmetric game by relabeling the choices. Let option A for each player be doing their favored choice, and option B be doing their less favored choice. That turns table \@ref(tab:bach-stravinsky) into table \@ref(tab:bach-stravinsky-symmetric).

```{r,bach-stravinsky-symmetric, cache=TRUE}
b_o_t_s_symmetric <- tribble(
	   ~"", ~A, ~B,
	   "A", "$0, 0$", "$4, 1$",
	   "B", "$1, 4$", "$0, 0$"
	)
gameformat(b_o_t_s_symmetric, "Battle of the sexes, relabeled.")
```

After making that change, change column's payouts so that it is a demonic game. The result is table \@ref(tab:bach-demon)

```{r,bach-demon, cache=TRUE}
b_o_t_s_demonic <- tribble(
	   ~"", ~A, ~B,
	   "A", "$0, 1$", "$4, 0$",
	   "B", "$1, 0$", "$0, 1$"
	)
gameformat(b_o_t_s_demonic, "A demonic version of battle of the sexes.")
```

Finally, replace Demon's choices with states generated by (probably accurate) predictions, to get the decision problem in table \@ref(tab:asymm-death-damascus).

```{r,asymm-death-damascus, cache=TRUE}
asymm_d_i_d <- tribble(
	   ~"", ~PA, ~PB,
	   "A", "$0$", "$4$",
	   "B", "$1$", "$0$"
	)
gameformat(asymm_d_i_d, "A demonic decision problem based on battle of the sexes.")
```

That decision problem is the asymmetric version of Death in Damascus from @Richter1984.

The point of this section has not just been to show that we can turn games into decision problems by treating one of the players as a predictor. That's true, but not in itself that interesting. Instead I want to make two further points.

One is that most of the problems that have been the focus of attention in the decision theory literature in the past couple of generations can be generated from very familiar games, the kinds of games you find in the first one or two chapters of a game theory textbook. And the generation method is fairly similar in each respect.

The second point is that most of the simple games you find in those introductory chapters turn out to result, once you transform them this way, in demonic decision problems that have been widely discussed. But there is just one exception here. There hasn't been a huge amount of discussion of the demonic decision problem you get when you start with the game known as stag hunt. I'll turn to that in the next subsection.

In later parts of the book, I'll be frequently appealing to decision problems that are generated from other games that have been widely discussed by economic theorists. Most of these discussions are not particularly recent; the bulk of the work I'll be citing is from the 1980s and 1990s, and I don't take myself to be making a significant contribution to contemporary economic theorising. But what I want to point out is that there is a vast source of examples in the economic theory literature that decision theorists could be, and should be, discussing. And I've spent so long here on the translation between the two literatures in part because I think there are huge gains to be had from bringing these literatures into contact.
